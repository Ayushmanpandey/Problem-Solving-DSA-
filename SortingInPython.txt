Sorting Algorithms in python


\\BUBBLE SORT \\
I/P : 1,2,5,7,8,3,4
APPROACH:

1 - iterate through the given array say var "i" in range of array;
2 - iterate "j" through  the range of "i" and compare the value of jth element with j+1 th element in the new array of range "i";
3 - if array[j+1] > array[i] then swap the elements;

CODE:
		def bubbleSort(array):
			for i in range(len(array) - 1 , 0 , -1 ):
				for j in range(i):
					if (array[j+1] > array[j]):
						array[j],array[j+1] = array[j+1] , array[j]
		array = [1,2,5,7,8,3,4]
		bubbleSort(array)
		print(array)
					


\\Selection sort;\\
i/p : 1,2,4,7,5,8,9
APPROACH :

1- iterate through the given list or array and select the largest number in the array ;
2- then compare each element of the array by iterating with j in range(1,i+1) with positionOfMax if its greater then put it positionOfMax value ;
3- swap the value of array[i] to with array[positionOfMax];

CODE :
	def selectSort(array):
		for i in range(len(array) - 1,0, -1): #iterate through the array
			positionOfMax = 0 # make a var positionOfMax which is 0 for now
			for j in range(1,i+1):
				if array[j] > array[positionOfMax]:
					positionOfMax = j
					array[i] , array[positionOfMax] = array[positionOfMax] , array[i]
	array =  1,2,4,7,5,8,9
	selectSort(array)
	print(array)
	
	
\\INSERTION SORT\\

I/P:  1,2,4,7,5,8,9
APPROACH:

CODE: 
		def insertionSort(array):
			for i in range(1 , len(array)):
				temp = array[i]  # important step to remember ;
				k = i 
				while k>1 and temp < array[k-1]:
					array[k] = array[k-1]
					k- = 1 
				array[k] = temp
		array =  1,2,4,7,5,8,9
		insertionSort(array)
		print(array)
		
\\ MERGE SORT\\ (DIVIDE & CONQUER)

I/P:  1,2,4,7,5,8,9

APPROACH:

1- divide by finding the midway of the given array between left and right ;
2 - conquer by recursively sorting the array in each case two subarrays are created ex . array[left,mid] and array[mid+1,right] ;
3 - combine by merging two sorted subarrays into single sorted subarray ex array[left , right];

CODE :

		def mergeSort(array):
			if len(array) > 1:
				mid = len(array) //2 
				leftHalf = array[:mid] #divide into leftHalf
				rightHalf  = array[mid:] #divide into rightHalf
				mergeSort(leftHalf) #recursively calling to divide again into left subarray ;
				mergeSort(rightHalf) # recursively calling to divide again into right subarray;
				
				#check if leftHalf element is less than rightHalf element then put the element in new
				#array and increase the element in new array;
				 while i < leftHalf and j < rightHalf:  
					if leftHalf[i]< rightHalf[j]:
						array[k] = leftHalf[i]
						i = i+1 
					else:
						array[k] = rightHalf[j]
						j = j+1
					k = k+1
				
				#merge the subarrays to form a single subarray ;
				while i < len(leftHalf):
					array[k] = leftHalf[i]
					i = i+1 
					k = k+1 
				while j < len(rightHalf):
					array[k]= rightHalf[i]
					i = i+1
					k= k+1
			#return array     #optional  when taking array from user not provided in the code;
		
		array =  1,2,4,7,5,8,9
		mergeSort(array)
		print(array)


\\QUICK SORT\\
					
					
I/P:  1,2,4,7,5,8,9
APPROACH:

use recursion:
1 - if there are one or no element in the array then return ;
2 - pick an element as pivot in the list generally the 1st elemtn is pivot 
3 - split the array into two parts one with larger element than pivot other with smaller element than pivot ;
4 - recursively repeat the algo for both the halves ;

splitting is done by as follows:

1 - select the first element as pivot ;
2 - select 2nd element as left pointer and last element as right pointer;
3 - then check while the value of the left pointer is less than pivot value move left pointer to right by 1 continue till value of left > = pivot
	also check if the value of right pointer > pivot then move right to left by 1 continue till right <= pivot ;
	
	while left>= pivot :  AND	 while right<= pivot :	
		if left < pivot :        if right > pivot:
			left = left+1		 	right = right - 1
			
4 - If left >= right then swap the values at this position;
5 - if left != right then go to step 1 ;

CODE:

	def quickSort(array,low , high):
		if low<high:
			partition_point = partition(array,low,high)
			quickSort(array,low,partition_point-1)
			quickSort(array,partition_point+1,high)
	def partition(array,low,high):
		pivot  = array[0]
		left = low +1 
		right = high 
		done  = False 
		
		while not done:
			while left <= right and array[left] <= pivot :
				left = left +1 
			while right >=left and array[right] >= pivot:
				right = right - 1
			if right < left 
				done = True
			else :
				temp = array[left]
				array[left] = array[right]
				array[right] = temp
		
		temp = array[low]
		array[low]= array[right]
		array[right] = temp
		return right 
		
	array = 1,2,4,7,5,8,9
	quickSort(array,0,len(array)-1)
	print(array)